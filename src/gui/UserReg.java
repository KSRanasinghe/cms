/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import com.formdev.flatlaf.FlatIntelliJLaf;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.util.Vector;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.MySQL;

/**
 *
 * @author KESHARA S.RANASINGHE
 */
public class UserReg extends javax.swing.JFrame {

    HomeA home;
    public String employeeId;

    /**
     * Creates new form UserReg
     */
    public UserReg() {
        initComponents();
        Image image = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/resources/coffe_shop.png"));
        this.setIconImage(image);
        loadUserType();
        loadUsers();
    }

    public UserReg(HomeA ha) {
        initComponents();
        Image image = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/resources/coffe_shop.png"));
        this.setIconImage(image);
        this.home = ha;
        loadUserType();
        loadUsers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kGradientPanel1 = new keeptoo.KGradientPanel();
        jPanel1 = new javax.swing.JPanel();
        btnSelectEmp = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblNic = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblMobile = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        comboUser = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtPswd1 = new javax.swing.JPasswordField();
        txtPswd2 = new javax.swing.JPasswordField();
        jLabel8 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        btnAddUser = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnStatus = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("User Management");

        kGradientPanel1.setkEndColor(new java.awt.Color(255, 240, 125));
        kGradientPanel1.setkGradientFocus(700);
        kGradientPanel1.setkStartColor(new java.awt.Color(181, 142, 37));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)), "Employee Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12), new java.awt.Color(51, 51, 51))); // NOI18N
        jPanel1.setOpaque(false);

        btnSelectEmp.setText("Select Employee");
        btnSelectEmp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSelectEmpMouseClicked(evt);
            }
        });
        btnSelectEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectEmpActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("Name");

        lblName.setText("None");
        lblName.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(51, 51, 51)));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("NIC");

        lblNic.setText("None");
        lblNic.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(51, 51, 51)));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("Mobile");

        lblMobile.setText("None");
        lblMobile.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(51, 51, 51)));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("Recruited Date");

        lblDate.setText("None");
        lblDate.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(51, 51, 51)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSelectEmp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblNic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(lblMobile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(lblDate, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSelectEmp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblName))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblNic))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblMobile))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lblDate))
                .addGap(16, 16, 16))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)), "User Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12), new java.awt.Color(51, 51, 51))); // NOI18N
        jPanel2.setOpaque(false);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("Username");

        txtUserName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtUserNameKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText("User Type");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("Password");

        txtPswd1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPswd1KeyTyped(evt);
            }
        });

        txtPswd2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPswd2KeyTyped(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(51, 51, 51));
        jLabel8.setText("Re-type Passwors");

        jCheckBox1.setText("Show Password");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setText("Show Password");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        btnAddUser.setText("Register User");
        btnAddUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddUserActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update User");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnStatus.setText("Change Status");
        btnStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStatusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnAddUser, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPswd1)
                            .addComponent(txtUserName)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                                .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                                    .addComponent(jCheckBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(comboUser, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtPswd2, javax.swing.GroupLayout.Alignment.LEADING)))))
                .addGap(18, 18, 18))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPswd1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPswd2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddUser)
                    .addComponent(btnUpdate)
                    .addComponent(btnStatus))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        jPanel3.setOpaque(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "User Type", "Username", "Password", "Name", "NIC", "Mobile Number", "Recruited Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(8).setPreferredWidth(18);
        }

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnRefresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout kGradientPanel1Layout = new javax.swing.GroupLayout(kGradientPanel1);
        kGradientPanel1.setLayout(kGradientPanel1Layout);
        kGradientPanel1Layout.setHorizontalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        kGradientPanel1Layout.setVerticalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelectEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectEmpActionPerformed
        EmployeeReg er = new EmployeeReg(this);
        er.setVisible(true);
    }//GEN-LAST:event_btnSelectEmpActionPerformed

    private void txtUserNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserNameKeyTyped
        String password = txtUserName.getText();
        String text = password + evt.getKeyChar();

        if (!Pattern.compile("[0-9a-zA-Z]*").matcher(text).matches()) {
            evt.consume();
        }
    }//GEN-LAST:event_txtUserNameKeyTyped

    private void txtPswd1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPswd1KeyTyped
        String password = txtPswd1.getText();
        String text = password + evt.getKeyChar();

        if (!Pattern.compile("[0-9a-zA-Z]*([$]?|[&]?|[_]?)[0-9a-zA-Z]*").matcher(text).matches()) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPswd1KeyTyped

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isSelected()) {
            txtPswd1.setEchoChar((char) 0);
        } else {
            txtPswd1.setEchoChar('\u2022');
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        if (jCheckBox2.isSelected()) {
            txtPswd2.setEchoChar((char) 0);
        } else {
            txtPswd2.setEchoChar('\u2022');
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void txtPswd2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPswd2KeyTyped
        String password = txtPswd2.getText();
        String text = password + evt.getKeyChar();

        if (!Pattern.compile("[0-9a-zA-Z]*([$]?|[&]?|[_]?)[0-9a-zA-Z]*").matcher(text).matches()) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPswd2KeyTyped

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        clearFields();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnSelectEmpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSelectEmpMouseClicked
        if (evt.getClickCount() == 2) {
            int selectedRow = jTable1.getSelectedRow();
            if (selectedRow == -1) {
                btnSelectEmp.setText("Select Employee");
                btnSelectEmp.setEnabled(true);
                lblName.setText("None");
                lblNic.setText("None");
                lblMobile.setText("None");
                lblDate.setText("None");
            }
        }
    }//GEN-LAST:event_btnSelectEmpMouseClicked

    private void btnAddUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddUserActionPerformed
        String name = lblName.getText();
        String username = txtUserName.getText();
        String pswd1 = txtPswd1.getText();
        String pswd2 = txtPswd2.getText();
        String user_type = comboUser.getSelectedItem().toString();

        if (name.equals("None")) {
            JOptionPane.showMessageDialog(this, "Employee is not selected.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (username.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Username is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtUserName.grabFocus();
        } else if (username.length() < 5) {
            JOptionPane.showMessageDialog(this, "Username is too short.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtUserName.grabFocus();
        } else if (username.length() > 15) {
            JOptionPane.showMessageDialog(this, "Username is too long.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtUserName.grabFocus();
        } else if (user_type.equals("Select")) {
            JOptionPane.showMessageDialog(this, "User type is not selected.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (pswd1.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Password is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtPswd1.grabFocus();
        } else if (pswd1.length() < 8) {
            JOptionPane.showMessageDialog(this, "Password is too short.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtPswd1.grabFocus();
        } else if (pswd1.length() > 16) {
            JOptionPane.showMessageDialog(this, "Password is too long.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtPswd1.grabFocus();
        } else if (pswd2.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Re-typed password is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtPswd2.grabFocus();
        } else if (!pswd2.equals(pswd1)) {
            JOptionPane.showMessageDialog(this, "Please make sure your passwords match.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtPswd2.grabFocus();
        } else {
            try {
                //search employee
                ResultSet rs = MySQL.search("SELECT * FROM `user` WHERE `employee_id` = '" + employeeId + "'");
                if (rs.next()) {
                    JOptionPane.showMessageDialog(this, "Employee already has an user account.", "Warning", JOptionPane.WARNING_MESSAGE);
                    loadUsers();
                    clearFields();
                    //search employee
                } else {
                    //search user_type
                    ResultSet rs2 = MySQL.search("SELECT * FROM `user_type` WHERE `name` = '" + user_type + "'");
                    rs2.next();
                    String user_type_id = rs2.getString("id");
                    //search user_type

                    //insert user
                    MySQL.push("INSERT INTO `user`(`username`,`password`,`employee_id`,`user_type_id`) VALUES"
                            + "('" + username + "','" + pswd1 + "','" + employeeId + "','" + user_type_id + "')");
                    //insert user

                    loadUsers();
                    clearFields();
                    JOptionPane.showMessageDialog(this, "User registered successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnAddUserActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int selectedRow = jTable1.getSelectedRow();
        String id = jTable1.getValueAt(selectedRow, 0).toString();
        String user_type = jTable1.getValueAt(selectedRow, 1).toString();
        String username = jTable1.getValueAt(selectedRow, 2).toString();
        String password = jTable1.getValueAt(selectedRow, 3).toString();
        String name = jTable1.getValueAt(selectedRow, 4).toString();
        String nic = jTable1.getValueAt(selectedRow, 5).toString();
        String mobile = jTable1.getValueAt(selectedRow, 6).toString();
        String date = jTable1.getValueAt(selectedRow, 7).toString();

        if (id.equals("1")) {
            loadUserType();
            comboUser.setEnabled(false);
        } else {
            comboUser.setEnabled(true);
            for (int i = 0; i < comboUser.getItemCount(); i++) {
                if (comboUser.getItemAt(i).toString().equalsIgnoreCase(user_type)) {
                    comboUser.setSelectedIndex(i);
                }
            }
        }
        lblName.setText(name);
        lblNic.setText(nic);
        lblMobile.setText(mobile);
        lblDate.setText(date);
        txtUserName.setText(username);
        txtPswd1.setText(password);
        btnSelectEmp.setEnabled(false);
        btnAddUser.setEnabled(false);
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an user.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            String id = jTable1.getValueAt(selectedRow, 0).toString();
            String username = txtUserName.getText();
            String pswd1 = txtPswd1.getText();
            String pswd2 = txtPswd2.getText();
            String user_type = comboUser.getSelectedItem().toString();

            if (!id.equals("1")) {
                if (user_type.equals("Select")) {
                    JOptionPane.showMessageDialog(this, "User type is not selected.", "Warning", JOptionPane.WARNING_MESSAGE);
                }
            }

            if (username.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Username is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
                txtUserName.grabFocus();
            } else if (username.length() < 5) {
                JOptionPane.showMessageDialog(this, "Username is too short.", "Warning", JOptionPane.WARNING_MESSAGE);
                txtUserName.grabFocus();
            } else if (username.length() > 15) {
                JOptionPane.showMessageDialog(this, "Username is too long.", "Warning", JOptionPane.WARNING_MESSAGE);
                txtUserName.grabFocus();
            } else if (pswd1.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Password is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
                txtPswd1.grabFocus();
            } else if (pswd1.length() < 8) {
                JOptionPane.showMessageDialog(this, "Password is too short.", "Warning", JOptionPane.WARNING_MESSAGE);
                txtPswd1.grabFocus();
            } else if (pswd1.length() > 16) {
                JOptionPane.showMessageDialog(this, "Password is too long.", "Warning", JOptionPane.WARNING_MESSAGE);
                txtPswd1.grabFocus();
            } else if (pswd2.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Re-typed password is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
                txtPswd2.grabFocus();
            } else if (!pswd2.equals(pswd1)) {
                JOptionPane.showMessageDialog(this, "Please make sure your passwords match.", "Warning", JOptionPane.WARNING_MESSAGE);
                txtPswd2.grabFocus();
            } else {
                try {
                    //admin username or password update process
                    if (id.equals("1")) {
                        MySQL.push("UPDATE `user` SET `username` = '" + username + "',`password` = '" + pswd1 + "' WHERE `id` = '" + id + "'");
                        clearFields();
                        JOptionPane.showMessageDialog(this, "Updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                        this.dispose();
                        home.dispose();
                        new Signin().setVisible(true);
                        //admin username or password update process
                    } else {

                        //search user_type
                        ResultSet rs1 = MySQL.search("SELECT * FROM `user_type` WHERE `name` = '" + user_type + "'");
                        rs1.next();
                        String user_type_id = rs1.getString("id");
                        //search user_type

                        //update another user
                        MySQL.push("UPDATE `user` SET `username` = '" + username + "',`password` = '" + pswd1 + "'"
                                + ",`user_type_id` = '" + user_type_id + "' WHERE `id` = '" + id + "'");
                        clearFields();
                        loadUsers();
                        JOptionPane.showMessageDialog(this, "Updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                        //update another user
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStatusActionPerformed
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an user.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            String id = jTable1.getValueAt(selectedRow, 0).toString();
            String currentStatus = jTable1.getValueAt(selectedRow, 8).toString();

            if (id.equals("1")) {
                JOptionPane.showMessageDialog(this, "Admin status can not update.", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                int status = 1;

                if (currentStatus.equals("Active")) {
                    status = 2;
                }
                try {
                    MySQL.push("UPDATE `user` SET `status_id` = '" + status + "' WHERE `id` = '" + id + "'");
                    JOptionPane.showMessageDialog(this, "User status update successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            clearFields();
            loadUsers();
        }
    }//GEN-LAST:event_btnStatusActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            FlatIntelliJLaf.setup();
        } catch (Exception e) {
            e.printStackTrace();
        }
        //</editor-fold>
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserReg().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddUser;
    private javax.swing.JButton btnRefresh;
    public javax.swing.JButton btnSelectEmp;
    private javax.swing.JButton btnStatus;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboUser;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private keeptoo.KGradientPanel kGradientPanel1;
    public javax.swing.JLabel lblDate;
    public javax.swing.JLabel lblMobile;
    public javax.swing.JLabel lblName;
    public javax.swing.JLabel lblNic;
    private javax.swing.JPasswordField txtPswd1;
    private javax.swing.JPasswordField txtPswd2;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables

    private void loadUserType() {
        try {
            ResultSet rs = MySQL.search("SELECT * FROM `user_type` LIMIT 100 OFFSET 1");
            Vector v = new Vector();
            v.add("Select");
            while (rs.next()) {
                v.add(rs.getString("name"));
            }
            comboUser.setModel(new DefaultComboBoxModel(v));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void clearFields() {
        lblName.setText("None");
        lblNic.setText("None");
        lblMobile.setText("None");
        lblDate.setText("None");
        txtUserName.setText("");
        txtPswd1.setText("");
        txtPswd2.setText("");
        comboUser.setSelectedIndex(0);
        jCheckBox1.setSelected(false);
        jCheckBox2.setSelected(false);
        comboUser.setEnabled(true);
        jTable1.clearSelection();
        btnSelectEmp.setText("Select Employee");
        btnSelectEmp.setEnabled(true);
        btnAddUser.setEnabled(true);
    }

    private void loadUsers() {
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);
            ResultSet rs = MySQL.search("SELECT * FROM `user` "
                    + "INNER JOIN `employee` ON `user`.`employee_id` = `employee`.`id` "
                    + "INNER JOIN `user_type` ON `user`.user_type_id = `user_type`.`id` "
                    + "INNER JOIN `status` ON `user`.`status_id` = `status`.`id` "
                    + "ORDER BY `user`.`id` ASC");
            while (rs.next()) {
                Vector v = new Vector();
                v.add(rs.getString("user.id"));
                v.add(rs.getString("user_type.name"));
                v.add(rs.getString("user.username"));
                v.add(rs.getString("user.password"));
                v.add(rs.getString("employee.fname") + " " + rs.getString("employee.lname"));
                v.add(rs.getString("employee.nic"));
                v.add(rs.getString("employee.contact_number"));
                v.add(rs.getString("employee.recruited_date"));
                v.add(rs.getString("status.name"));
                dtm.addRow(v);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
