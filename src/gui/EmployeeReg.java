/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import com.formdev.flatlaf.FlatIntelliJLaf;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.MySQL;

/**
 *
 * @author KESHARA S.RANASINGHE
 */
public class EmployeeReg extends javax.swing.JFrame {

    UserReg ur;

    /**
     * Creates new form EmployeeReg
     */
    public EmployeeReg() {
        initComponents();
        Image image = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/resources/coffe_shop.png"));
        this.setIconImage(image);
        loadGender();
        loadEmployees();
        txtFname.grabFocus();
    }

    public EmployeeReg(UserReg userReg) {
        initComponents();
        Image image = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/resources/coffe_shop.png"));
        this.setIconImage(image);
        this.ur = userReg;
        loadGender();
        loadEmployees();
        txtFname.grabFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kGradientPanel1 = new keeptoo.KGradientPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtFname = new javax.swing.JTextField();
        txtLname = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNic = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        comboGender = new javax.swing.JComboBox<>();
        txtMobile = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtLine1 = new javax.swing.JTextField();
        txtLine2 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnEmpReg = new javax.swing.JButton();
        btnUpdateEmp = new javax.swing.JButton();
        btnChangeStatus = new javax.swing.JButton();
        labelCity = new javax.swing.JLabel();
        btnCity = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        txtSearchNIC = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Employee Management");

        kGradientPanel1.setkEndColor(new java.awt.Color(255, 240, 125));
        kGradientPanel1.setkGradientFocus(700);
        kGradientPanel1.setkStartColor(new java.awt.Color(181, 142, 37));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)), "Emplyee Profile Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12), new java.awt.Color(51, 51, 51))); // NOI18N
        jPanel1.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("First Name");

        txtFname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFnameKeyTyped(evt);
            }
        });

        txtLname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtLnameKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("Last Name");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("NIC Number");

        txtNic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNicKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("Gender");

        txtMobile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMobileKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("Mobile Number");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFname)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(txtLname)))
                    .addComponent(txtNic)
                    .addComponent(jLabel3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(comboGender, 0, 151, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMobile, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                            .addComponent(jLabel5))))
                .addGap(15, 15, 15))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtLname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMobile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)), "Employee Address Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12), new java.awt.Color(51, 51, 51))); // NOI18N
        jPanel2.setOpaque(false);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText("Address Line 1");

        txtLine1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtLine1KeyTyped(evt);
            }
        });

        txtLine2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtLine2KeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("Address Line 2");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(51, 51, 51));
        jLabel8.setText("City");

        btnEmpReg.setText("Register Employee");
        btnEmpReg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpRegActionPerformed(evt);
            }
        });

        btnUpdateEmp.setText("Update Employee");
        btnUpdateEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateEmpActionPerformed(evt);
            }
        });

        btnChangeStatus.setText("Change Status");
        btnChangeStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeStatusActionPerformed(evt);
            }
        });

        labelCity.setText("None");
        labelCity.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(51, 51, 51)));

        btnCity.setText("Select City");
        btnCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnEmpReg, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdateEmp, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnChangeStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtLine2)
                            .addComponent(txtLine1)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(labelCity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(14, 14, 14))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtLine1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLine2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(labelCity)
                    .addComponent(btnCity))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEmpReg)
                    .addComponent(btnUpdateEmp)
                    .addComponent(btnChangeStatus))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51))));
        jPanel3.setOpaque(false);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(51, 51, 51));
        jLabel10.setText("Search by NIC");

        txtSearchNIC.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(51, 51, 51)));
        txtSearchNIC.setOpaque(false);
        txtSearchNIC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchNICKeyReleased(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Employee Name", "Gender", "NIC", "Contact No.", "Address", "Recruited Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(70);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(180);
        }

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(447, 447, 447)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtSearchNIC, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                .addGap(55, 55, 55)
                .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                .addGap(15, 15, 15))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 994, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtSearchNIC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefresh))
                .addContainerGap(222, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addGap(49, 49, 49)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout kGradientPanel1Layout = new javax.swing.GroupLayout(kGradientPanel1);
        kGradientPanel1.setLayout(kGradientPanel1Layout);
        kGradientPanel1Layout.setHorizontalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        kGradientPanel1Layout.setVerticalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtMobileKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMobileKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        } else if (txtMobile.getText().length() >= 10) {
            evt.consume();
        }
    }//GEN-LAST:event_txtMobileKeyTyped

    private void txtFnameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFnameKeyTyped
        if (!Character.isAlphabetic(evt.getKeyChar())) {
            evt.consume();
        } else if (txtFname.getText().length() >= 20) {
            evt.consume();
        }
    }//GEN-LAST:event_txtFnameKeyTyped

    private void txtLnameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLnameKeyTyped
        if (!Character.isAlphabetic(evt.getKeyChar())) {
            evt.consume();
        } else if (txtLname.getText().length() >= 20) {
            evt.consume();
        }
    }//GEN-LAST:event_txtLnameKeyTyped

    private void btnCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCityActionPerformed
        CityReg cr = new CityReg(this, true);
        cr.setVisible(true);
    }//GEN-LAST:event_btnCityActionPerformed

    private void txtNicKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNicKeyTyped
        String nic = txtNic.getText();
        String txt = nic + evt.getKeyChar();
        if (!Pattern.compile("[1-9][0-9]{0,8}(v|V)?|[1|2][0-9]{0,11}").matcher(txt).matches()) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNicKeyTyped

    private void btnEmpRegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpRegActionPerformed
        String fname = txtFname.getText();
        String lname = txtLname.getText();
        String nic = txtNic.getText();
        String mobile = txtMobile.getText();
        String line1 = txtLine1.getText();
        String line2 = txtLine2.getText();
        String city = labelCity.getText();
        String gender = comboGender.getSelectedItem().toString();
        Date d = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

        if (fname.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "First Name is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtFname.grabFocus();
        } else if (lname.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Last Name is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtLname.grabFocus();
        } else if (nic.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "NIC is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtNic.grabFocus();
        } else if (nic.length() < 10 || nic.length() == 11 || Pattern.compile("^.*(.)\\1\\1\\1\\1\\1.*$").matcher(nic).matches()) {
            JOptionPane.showMessageDialog(this, "NIC is invalid.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtNic.grabFocus();
        } else if (gender.equals("Select")) {
            JOptionPane.showMessageDialog(this, "Gender is not selected.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (mobile.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Mobile Number is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtMobile.grabFocus();
        } else if (!Pattern.compile("07[01245678][0-9]{7}").matcher(mobile).matches()) {
            JOptionPane.showMessageDialog(this, "Mobile Number is invalid.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtMobile.grabFocus();
        } else if (line1.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Addres line 1 is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtLine1.grabFocus();
        } else if (line2.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Addres line 2 is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtLine2.grabFocus();
        } else if (city.equals("None")) {
            JOptionPane.showMessageDialog(this, "City is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {

            try {
                //search gender
                ResultSet rs1 = MySQL.search("SELECT * FROM `gender` WHERE `name` = '" + gender + "'");
                rs1.next();
                String gender_id = rs1.getString("id");
                //search gender

                //insert & search employee
                MySQL.push("INSERT INTO `employee`(`fname`,`lname`,`nic`,`contact_number`,`recruited_date`,`gender_id`) VALUES"
                        + "('" + fname + "','" + lname + "','" + nic + "','" + mobile + "','" + sdf.format(d) + "','" + gender_id + "')");

                ResultSet rs2 = MySQL.search("SELECT * FROM `employee` WHERE `nic` = '" + nic + "'");
                rs2.next();
                String id = rs2.getString("id");
                //insert & search employee

                //search city
                ResultSet rs3 = MySQL.search("SELECT * FROM `city` WHERE `name` = '" + city + "'");
                rs3.next();
                String city_id = rs3.getString("id");
                //search city

                //insert employee_address
                MySQL.push("INSERT INTO `employee_address`(`line1`,`line2`,`city_id`,`employee_id`) VALUES"
                        + "('" + line1 + "','" + line2 + "','" + city_id + "','" + id + "')");
                //insert employee_address

                clearFields();
                loadEmployees();
                JOptionPane.showMessageDialog(this, "Employee registerd successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }//GEN-LAST:event_btnEmpRegActionPerformed

    private void btnUpdateEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateEmpActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        String id = jTable1.getValueAt(selectedRow, 0).toString();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an employee.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (id.equals("0")) {
            JOptionPane.showMessageDialog(this, "Owner details can not update.", "Warning", JOptionPane.WARNING_MESSAGE);
            clearFields();
            loadEmployees();
        } else {
            String fname = txtFname.getText();
            String lname = txtLname.getText();
            String nic = txtNic.getText();
            String mobile = txtMobile.getText();
            String line1 = txtLine1.getText();
            String line2 = txtLine2.getText();
            String city = labelCity.getText();
            String gender = comboGender.getSelectedItem().toString();

            if (fname.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "First Name is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
                txtFname.grabFocus();
            } else if (lname.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Last Name is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
                txtLname.grabFocus();
            } else if (nic.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "NIC is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
                txtNic.grabFocus();
            } else if (nic.length() < 10 || nic.length() == 11 || Pattern.compile("^.*(.)\\1\\1\\1\\1\\1.*$").matcher(nic).matches()) {
                JOptionPane.showMessageDialog(this, "NIC is invalid.", "Warning", JOptionPane.WARNING_MESSAGE);
                txtNic.grabFocus();
            } else if (gender.equals("Select")) {
                JOptionPane.showMessageDialog(this, "Gender is not selected.", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (mobile.length() == 0) {
                JOptionPane.showMessageDialog(this, "Mobile Number is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
                txtMobile.grabFocus();
            } else if (!Pattern.compile("07[01245678][0-9]{7}").matcher(mobile).matches()) {
                JOptionPane.showMessageDialog(this, "Mobile Number is invalid.", "Warning", JOptionPane.WARNING_MESSAGE);
                txtMobile.grabFocus();
            } else if (line1.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Addres line 1 is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
                txtLine1.grabFocus();
            } else if (line2.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Addres line 2 is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
                txtLine2.grabFocus();
            } else if (city.equals("None")) {
                JOptionPane.showMessageDialog(this, "City is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                try {

                    //search gender
                    ResultSet rs1 = MySQL.search("SELECT * FROM `gender` WHERE `name` = '" + gender + "'");
                    rs1.next();
                    String gender_id = rs1.getString("id");
                    //search gender

                    //update employee
                    MySQL.push("UPDATE `employee` SET `fname` = '" + fname + "',`lname` = '" + lname + "', `nic` =  '" + nic + "',"
                            + "`contact_number` = '" + mobile + "', `gender_id` = '" + gender_id + "' WHERE `id` = '" + id + "'");
                    //update employee

                    //serch city & update employee_address
                    ResultSet rs3 = MySQL.search("SELECT * FROM `city` WHERE `name` = '" + city + "'");
                    rs3.next();
                    String city_id = rs3.getString("id");

                    MySQL.push("UPDATE `employee_address` SET `line1` = '" + line1 + "',`line2` = '" + line2 + "', `city_id` =  '" + city_id + "'"
                            + "WHERE `employee_id` = '" + id + "'");
                    //serch city & update employee_address
                    clearFields();
                    loadEmployees();
                    JOptionPane.showMessageDialog(this, "Updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_btnUpdateEmpActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int selectedRow = jTable1.getSelectedRow();
        String employee_id = jTable1.getValueAt(selectedRow, 0).toString();
        String employee_name = jTable1.getValueAt(selectedRow, 1).toString();
        String name[] = employee_name.split(" ");
        String gender = jTable1.getValueAt(selectedRow, 2).toString();
        String nic = jTable1.getValueAt(selectedRow, 3).toString();
        String mobile = jTable1.getValueAt(selectedRow, 4).toString();
        String address_full = jTable1.getValueAt(selectedRow, 5).toString();
        String address[] = address_full.split(",");
        String rec_date = jTable1.getValueAt(selectedRow, 6).toString();
        String status = jTable1.getValueAt(selectedRow, 7).toString();

        btnEmpReg.setEnabled(false);
        txtFname.setText(name[0]);
        txtLname.setText(name[1]);
        txtNic.setText(nic);
        txtMobile.setText(mobile);
        txtLine1.setText(address[0]);
        txtLine2.setText(address[1]);
        labelCity.setText(address[2]);
        for (int i = 0; i < comboGender.getItemCount(); i++) {
            if (comboGender.getItemAt(i).toString().equalsIgnoreCase(gender)) {
                comboGender.setSelectedIndex(i);
            }
        }

        if (evt.getClickCount() == 2) {
            if (status.equals("Inactive")) {
                JOptionPane.showMessageDialog(this, "Inactive employee. Can not set as an user.", "Warning", JOptionPane.WARNING_MESSAGE);
                clearFields();
                loadEmployees();
            } else {
                if (employee_id.equals("0")) {
                    JOptionPane.showMessageDialog(this, "The owner already has a user account.", "Warning", JOptionPane.WARNING_MESSAGE);
                    clearFields();
                    loadEmployees();
                } else {
                    ur.employeeId = employee_id;
                    ur.lblName.setText(employee_name);
                    ur.lblNic.setText(nic);
                    ur.lblMobile.setText(mobile);
                    ur.lblDate.setText(rec_date);
                    ur.btnSelectEmp.setText("Change Employee");
                    ur.btnSelectEmp.setEnabled(false);
                    this.dispose();
                }
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void txtLine1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLine1KeyTyped
        String line1 = txtLine1.getText();
        String text = line1 + evt.getKeyChar();
        if (!Pattern.compile("[0-9a-zA-Z]*/?[' ']?[0-9a-zA-Z]*").matcher(text).matches()) {
            evt.consume();
        }
    }//GEN-LAST:event_txtLine1KeyTyped

    private void txtLine2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLine2KeyTyped
        String line2 = txtLine2.getText();
        String text = line2 + evt.getKeyChar();
        if (!Pattern.compile("[0-9a-zA-Z]*/?[' ']?[0-9a-zA-Z]*").matcher(text).matches()) {
            evt.consume();
        }
    }//GEN-LAST:event_txtLine2KeyTyped

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        clearFields();
        loadEmployees();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnChangeStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeStatusActionPerformed
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an employee.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            String id = jTable1.getValueAt(selectedRow, 0).toString();
            String currentStatus = jTable1.getValueAt(selectedRow, 7).toString();

            if (id.equals("0")) {
                JOptionPane.showMessageDialog(this, "Owner status can not update.", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                int status = 1;

                if (currentStatus.equals("Active")) {
                    status = 2;
                }
                try {
                    MySQL.push("UPDATE `employee` SET `status_id` = '" + status + "' WHERE `id` = '" + id + "'");
                    JOptionPane.showMessageDialog(this, "Employee status update successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            clearFields();
            loadEmployees();
        }
    }//GEN-LAST:event_btnChangeStatusActionPerformed

    private void txtSearchNICKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchNICKeyReleased
        String search = txtSearchNIC.getText();
        loadEmployees(search);
    }//GEN-LAST:event_txtSearchNICKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            FlatIntelliJLaf.setup();
        } catch (Exception e) {
            e.printStackTrace();
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeReg().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChangeStatus;
    private javax.swing.JButton btnCity;
    private javax.swing.JButton btnEmpReg;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnUpdateEmp;
    private javax.swing.JComboBox<String> comboGender;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private keeptoo.KGradientPanel kGradientPanel1;
    public javax.swing.JLabel labelCity;
    private javax.swing.JTextField txtFname;
    private javax.swing.JTextField txtLine1;
    private javax.swing.JTextField txtLine2;
    private javax.swing.JTextField txtLname;
    private javax.swing.JTextField txtMobile;
    private javax.swing.JTextField txtNic;
    private javax.swing.JTextField txtSearchNIC;
    // End of variables declaration//GEN-END:variables

    private void loadGender() {
        try {
            ResultSet rs = MySQL.search("SELECT * FROM `gender`");
            Vector v = new Vector();
            v.add("Select");
            while (rs.next()) {
                v.add(rs.getString("name"));
            }
            comboGender.setModel(new DefaultComboBoxModel(v));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadEmployees() {
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);
            ResultSet rs = MySQL.search("SELECT * FROM `employee` "
                    + "INNER JOIN `gender` ON `employee`.`gender_id` = `gender`.`id` "
                    + "INNER JOIN `employee_address` ON `employee`.id = `employee_address`.`employee_id` "
                    + "INNER JOIN `status` ON `employee`.`status_id` = `status`.`id` "
                    + "INNER JOIN `city` ON `employee_address`.`city_id` = `city`.`id`"
                    + "ORDER BY `employee`.`id` ASC, `status`.`id` ASC");
            while (rs.next()) {
                Vector v = new Vector();
                v.add(rs.getString("employee.id"));
                v.add(rs.getString("employee.fname") + " " + rs.getString("employee.lname"));
                v.add(rs.getString("gender.name"));
                v.add(rs.getString("employee.nic"));
                v.add(rs.getString("employee.contact_number"));
                String address = rs.getString("employee_address.line1") + "," + rs.getString("employee_address.line2") + "," + rs.getString("city.name");
                v.add(address);
                v.add(rs.getString("employee.recruited_date"));
                v.add(rs.getString("status.name"));
                dtm.addRow(v);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadEmployees(String text) {
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);
            ResultSet rs = MySQL.search("SELECT * FROM `employee` "
                    + "INNER JOIN `gender` ON `employee`.`gender_id` = `gender`.`id` "
                    + "INNER JOIN `employee_address` ON `employee`.id = `employee_address`.`employee_id` "
                    + "INNER JOIN `status` ON `employee`.`status_id` = `status`.`id` "
                    + "INNER JOIN `city` ON `employee_address`.`city_id` = `city`.`id`"
                    + "WHERE `employee`.`nic` LIKE '%" + text + "%' ORDER BY `employee`.`id` ASC, `status`.`id` ASC");
            while (rs.next()) {
                Vector v = new Vector();
                v.add(rs.getString("employee.id"));
                v.add(rs.getString("employee.fname") + " " + rs.getString("employee.lname"));
                v.add(rs.getString("gender.name"));
                v.add(rs.getString("employee.nic"));
                v.add(rs.getString("employee.contact_number"));
                String address = rs.getString("employee_address.line1") + "," + rs.getString("employee_address.line2") + "," + rs.getString("city.name");
                v.add(address);
                v.add(rs.getString("employee.recruited_date"));
                v.add(rs.getString("status.name"));
                dtm.addRow(v);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void clearFields() {
        btnEmpReg.setEnabled(true);
        txtFname.setText("");
        txtLname.setText("");
        txtMobile.setText("");
        txtNic.setText("");
        txtSearchNIC.setText("");
        txtLine1.setText("");
        txtLine2.setText("");
        labelCity.setText("None");
        comboGender.setSelectedIndex(0);
        txtFname.grabFocus();
    }
}
